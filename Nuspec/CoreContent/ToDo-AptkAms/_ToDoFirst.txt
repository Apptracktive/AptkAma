//// Setup ////

1. Update/Create your Model classes so that they all inherit from EntityData abstract class 
or ITableData interface if there's another parent class yet.

2. Install this AptkAms Plugin nuget package on your platform(s) project(s) to configure and initialize the plugin before using it
and consider to register an intance of it with IoC wich is a better way to use it than calling the static AptkAmsPluginLoader.Instance each time
(Look at MvvmCross, MvvmLight, FreshMvvm or any Mvvm/IoC framework of your choice).

4. (Optional) If you want to manage local data thanks to LocalTable<T> and other methods
you have to install the AptkAms Plugin LocalStore Extension nuget package.

5. (Optional) You can save some parameters with local caching by implementing the IAptkAmsCaseService interface. 
It is useful when trying to handle authentication token expiration, auto-login or notification auto-register.
For example, you may want to implement it with the help of the Settings Plugin for Xamarin & Windows (see samples).


//// Usage ////

The main purpose is to access any Azure Mobile Services API functionality by a single line of code from anywhere in the project (PCL or not), like:

    var openItems = await _aptkAmsService.Data.RemoteTable<TodoItem>().Where(t => !t.Complete).ToListAsync();

where _aptkAmsService is resolved from AptkAmsPluginLoader.Instance.


Enjoy!


Tutorials on http://www.apptracktive.com
Project, samples and documentation on https://github.com/Apptracktive
Contact on Twitter @Apptracktive